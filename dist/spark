#!/bin/bash

function configure_cli(){
  if [ $cli -eq 0 ]; then
    spin
    pprint --success "configuring cli"
    install zsh
    install lsd
    install neovim
    install trash-cli
    if [ $package_manager == "dnf" ]; then
      install bat
    fi
    stop-spin
  fi
}
#!/bin/bash

function configure_personal_system(){
  if [ $personal_system -eq 0 ]; then
    spin
    pprint --success "configuring personal system"
    install zsh

    log "creating user logan if they don't exist"
    useradd "logan" || pprint --failure "user already exists"
    log "changing user's full name to Logan Hillyer"
    chfn -f "Logan Hillyer" "logan"
    log "changing user's startup shell to zsh"
    usermod -s /bin/zsh "logan"
    stop-spin
  fi
}


#!/bin/bash
function detect_platform(){
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  os=linux
  distro_id=$(cat /etc/os-release | grep "^ID=" | cut -d'=' -f2)
  if [ $distro_id = "fedora" ]; then
    distro=fedora
    package_manager=dnf
  elif [ $distro_id = "debian" ]; then
    distro=debian
    package_manager=apt
  elif [ $distro_id = "raspbian" ]; then
    distro=raspbian
    package_manager=apt
  elif [ $distro_id = "ubuntu" ]; then
    distro=ubuntu
    package_manager=apt
  else
    pprint --failure unrecognized linux distro: $distro_id
    exit 1
  fi
else
  pprint --failure unrecognized OSTYPE: $OSTYPE
  exit 1
fi
}

function set_package_manager_commands(){
  if [ $os == "linux" ]; then

    echo "setting linux package manager settings:"
    case $package_manager in
      dnf)
        function install(){
          pprint --log "installing $@"
          dnf install --assumeyes $@
        }
        function upgrade(){
          pprint --log "upgrading system"
          dnf upgrade --assumeyes
        }
        ;;
      apt)
        function install(){
          log "installing $@"
          apt install --yes $@ || pprint --failure "cannot install $@"
        }
        function upgrade(){
          log "upgrading system"
          apt -qq update && apt -qq upgrade --yes
        }
        ;;
      *)
        pprint --failure "distro not recognized"
        exit 1
      esac
  else
    pprint --failure "system not support"
    exit 1
  fi
}
#!/bin/bash


prompt_yes_no(){
while true; do
  echo $1
  printf "(y/N)> "
  read yn

  case $yn in 
    yes )
      return 1;;
    y )
      return 0;;
    0 )
      return 0;;
    true )
      return 0;;
    no )
      return 1;;
    n )
      return 1;;
    1 )
      return 1;;
    false )
      return 1;;
    '' )
      return 1;;
    * )
      return 1
  esac
  
  done
}


set_install_flag(){
  flag_name=$1
  if prompt_yes_no "configure $1?"; then
    eval "$flag_name=\"0\""
  else
    eval "$flag_name=\"1\""
  fi
}
#!/bin/bash

function parse_args(){
  # non interactive by default
  interactive=1
  while [[ $# -gt 0 ]]; do
    case $1 in
      -h|--help)
        echo "goodluck!"
        shift # past argument
        ;;
      --interactive)
        interactive=0
        shift # past argument
        ;;
      -*|--*)
        pprint --failure "unknown option $1"
        exit 1
        ;;
      *)
        ;;
    esac
  done
}
#!/bin/bash

function pprint(){


  REDNUM="31"
  GREENNUM="32"
  YELLOWNUM="33"
  GREYNUM="37"
  GREEN="\033[${GREENNUM}m"
  RED="\033[${REDNUM}m"
  YELLOW="\033[${YELLOWNUM}m"
  GREY="\033[${GREYNUM}m"
  BOLDGREEN="\033[1;${GREENNUM}m"
  ITALICRED="\033[3;${REDNUM}m"
  ENDCOLOR="\033[0m"

  
  case $1 in
    --success)
      printf -- "${BOLDGREEN}[${@:2}]${ENDCOLOR}\n"
      # print all arguments except first
      ;;
    --failure)
      printf -- "${RED}${@:2}${ENDCOLOR}\n"
      ;;
    --log)
      printf -- "${YELLOW}(${@:2})${ENDCOLOR}\n"
      ;;
    *)
      printf -- "${GREY}$1${ENDCOLOR}\n"
      ;;
  esac
}

function log(){
  pprint --log "$@"
}
#!/bin/bash


function set_setup_flags(){
  if [ $interactive -eq 0 ]; then
    # set_install_flag "remote_access"
    # set_install_flag "workstation"
    set_install_flag "personal_system"
    set_install_flag "cli"
  else
    # non interactive mode
    remote_access=1
    workstation=1
    personal_system=1
    cli=0
  fi
}
#!/bin/bash
# Bash, with GNU sleep
function spinner() {
  local i=0
  local sp='/-\|'
  local n=${#sp}
  printf ' '
  while sleep 0.1; do
    printf '\b%s' "${sp:i++%n:1}"
  done
}
function spin() {
  spinner & spinpid=$!
}
function stop-spin() {
  kill $spinpid
}
#!/bin/bash
if [[ $EUID -ne 0 ]]; then
   pprint --failure "This script must be run as root" 
   exit 1
fi
parse_args

pprint --success "Welcome to Logan's world renowned computer configuration system!"


detect_platform
set_package_manager_commands


set_setup_flags

configure_personal_system
configure_cli




pprint --success "setup finished! Enjoy your new system!"
pprint
exit 0
